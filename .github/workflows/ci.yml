# This workflow will build a Java project with Gradle and deploy to EC2
name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Build Docker image
      run: docker build -t java-app .
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Tag and Push Docker image
      run: |
        docker tag java-app abraiz/java-app:latest
        docker tag java-app abraiz/java-app:${{ github.sha }}
        docker push abraiz/java-app:latest
        docker push abraiz/java-app:${{ github.sha }}
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull latest image
          docker pull abraiz/java-app:latest
          
          # Stop and remove existing container
          docker stop java-app || true
          docker rm java-app || true
          
          # Run new container
          docker run -d \
            --name java-app \
            -p 80:8080 \
            --restart unless-stopped \
            abraiz/java-app:latest
          
          # Clean up old images
          docker image prune -f